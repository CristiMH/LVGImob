# Generated by Django 4.2.21 on 2025-05-30 17:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Numărul de telefon nu este valid. Ex: +37369123456', regex='^\\+?[\\d\\s()-]{7,15}$')])),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ConstructionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='HeatingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('price', models.IntegerField(db_index=True)),
                ('availability', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Numărul de telefon nu este valid. Ex: +37369123456', regex='^\\+?[\\d\\s()-]{7,15}$')])),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlanningType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SaleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sector', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['sector'],
            },
        ),
        migrations.CreateModel(
            name='SurfaceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Numărul de telefon nu este valid. Ex: +37369123456', regex='^\\+?[\\d\\s()-]{7,15}$')])),
                ('email', models.EmailField(max_length=254)),
                ('estimated_price', models.IntegerField(default=0)),
                ('note', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='api.condition')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='api.location')),
                ('property_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='api.propertytype')),
                ('sector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='api.sector')),
            ],
        ),
        migrations.CreateModel(
            name='ListingImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='imagini_anunturi/')),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='images', to='api.listing')),
            ],
        ),
        migrations.AddField(
            model_name='listing',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='listings', to='api.location'),
        ),
        migrations.AddField(
            model_name='listing',
            name='property_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='listings', to='api.propertytype'),
        ),
        migrations.AddField(
            model_name='listing',
            name='sale_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='listings', to='api.saletype'),
        ),
        migrations.AddField(
            model_name='listing',
            name='sector',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='listings', to='api.sector'),
        ),
        migrations.AddField(
            model_name='listing',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='listings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('land_surface', models.DecimalField(decimal_places=1, max_digits=10)),
                ('listing', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, related_name='land', to='api.listing')),
                ('surface_type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='lands', to='api.surfacetype')),
            ],
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surface', models.IntegerField()),
                ('land_surface', models.DecimalField(decimal_places=1, max_digits=10)),
                ('rooms', models.IntegerField()),
                ('total_floors', models.IntegerField()),
                ('bathrooms', models.IntegerField()),
                ('water_installation', models.BooleanField()),
                ('gas_installation', models.BooleanField()),
                ('sewerage_installation', models.BooleanField()),
                ('listing', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, related_name='house', to='api.listing')),
            ],
        ),
        migrations.CreateModel(
            name='CommercialSpace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surface', models.IntegerField()),
                ('floor', models.IntegerField()),
                ('offices', models.IntegerField()),
                ('bathrooms', models.IntegerField()),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='commercial_spaces', to='api.condition')),
                ('listing', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, related_name='commercial_space', to='api.listing')),
            ],
        ),
        migrations.CreateModel(
            name='Apartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surface', models.IntegerField()),
                ('rooms', models.IntegerField()),
                ('floor', models.IntegerField()),
                ('total_floors', models.IntegerField()),
                ('bathrooms', models.IntegerField()),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='apartments', to='api.condition')),
                ('construction_type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='apartments', to='api.constructiontype')),
                ('heating_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='apartments', to='api.heatingtype')),
                ('listing', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, related_name='apartment', to='api.listing')),
                ('planning_type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='apartments', to='api.planningtype')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='user_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='api.usertype'),
        ),
    ]
